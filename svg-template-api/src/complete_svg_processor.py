#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π SVG –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
- –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (property, logo, headshot)
- –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–¥–∞—Ç—ã, —Ü–µ–Ω—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã)
- –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–∞ –∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
- –í–æ–∑–≤—Ä–∞—Ç URL –≥–æ—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import re
import base64
import os
import tempfile
from typing import Dict, List, Tuple, Optional
import xml.etree.ElementTree as ET

class CompleteSVGProcessor:
    def __init__(self, svg_content: str, canvas_width: int = 1080):
        self.original_svg = svg_content
        self.processed_svg = svg_content
        self.canvas_width = canvas_width
        self.dyno_elements = {}
        self.analyze_template()
    
    def analyze_template(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SVG —à–∞–±–ª–æ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ dyno —ç–ª–µ–º–µ–Ω—Ç—ã"""
        print("üìã –ê–Ω–∞–ª–∏–∑ SVG —à–∞–±–ª–æ–Ω–∞...")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "dyno."
        dyno_pattern = r'id="([^"]*dyno\.[^"]*)"'
        matches = re.findall(dyno_pattern, self.processed_svg)
        
        for element_id in matches:
            if 'dyno.' in element_id:
                dyno_id = element_id.split('dyno.')[1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
                if self._is_image_element(element_id):
                    element_type = 'image'
                else:
                    element_type = 'text'
                
                self.dyno_elements[dyno_id] = {
                    'id': element_id,
                    'type': element_type,
                    'original_content': self._get_element_content(element_id)
                }
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(self.dyno_elements)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for dyno_id, info in self.dyno_elements.items():
            print(f"  ‚Ä¢ {dyno_id} ({info['type']})")
    
    def _is_image_element(self, element_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç image —Å –¥–∞–Ω–Ω—ã–º id
        image_pattern = rf'<image[^>]*id="{re.escape(element_id)}"[^>]*>'
        return bool(re.search(image_pattern, self.processed_svg))
    
    def _get_element_content(self, element_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        text_pattern = rf'<text[^>]*id="{re.escape(element_id)}"[^>]*>(.*?)</text>'
        text_match = re.search(text_pattern, self.processed_svg, re.DOTALL)
        if text_match:
            return text_match.group(1).strip()
        
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_pattern = rf'<image[^>]*id="{re.escape(element_id)}"[^>]*href="([^"]*)"'
        image_match = re.search(image_pattern, self.processed_svg)
        if image_match:
            return image_match.group(1)
        
        return ""
    
    def replace_text(self, dyno_id: str, new_text: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å–æ–º"""
        if dyno_id not in self.dyno_elements:
            print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {dyno_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        element_id = self.dyno_elements[dyno_id]['id']
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞
        if 'address' in dyno_id.lower():
            self._replace_address_with_wrapping(element_id, new_text)
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è bedroom/bathroom
        elif 'bedroom' in dyno_id.lower() or 'bathroom' in dyno_id.lower():
            self._replace_with_consistent_spacing(element_id, new_text)
        else:
            self._replace_simple_text(element_id, new_text)
        
        print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –≤ {dyno_id}: '{new_text}'")
    
    def _replace_address_with_wrapping(self, element_id: str, address: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç –∞–¥—Ä–µ—Å —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å–æ–º –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –Ω–∞ —á–∞—Å—Ç–∏
        parts = address.split(',')
        if len(parts) >= 2:
            line1 = parts[0].strip()
            line2 = ','.join(parts[1:]).strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
            words = address.split()
            if len(words) > 3:
                split_point = len(words) // 2
                line1 = ' '.join(words[:split_point])
                line2 = ' '.join(words[split_point:])
            else:
                line1 = address
                line2 = ""
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π text —ç–ª–µ–º–µ–Ω—Ç
        text_pattern = rf'(<text[^>]*id="{re.escape(element_id)}"[^>]*>)(.*?)(</text>)'
        match = re.search(text_pattern, self.processed_svg, re.DOTALL)
        
        if match:
            opening_tag = match.group(1)
            closing_tag = match.group(3)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x_match = re.search(r'x="([^"]*)"', opening_tag)
            y_match = re.search(r'y="([^"]*)"', opening_tag)
            
            if x_match and y_match:
                x = float(x_match.group(1))
                y = float(y_match.group(1))
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏
                new_content = f"""<tspan x="{x}" y="{y}">{line1}</tspan>"""
                if line2:
                    new_content += f"""<tspan x="{x}" y="{y + 35}">{line2}</tspan>"""
                
                replacement = f"{opening_tag}{new_content}{closing_tag}"
                self.processed_svg = re.sub(text_pattern, replacement, self.processed_svg, flags=re.DOTALL)
    
    def _replace_with_consistent_spacing(self, element_id: str, text: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è bedroom/bathroom"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—É –∏ —Å–ª–æ–≤–æ
        parts = text.split(' ', 1)
        if len(parts) == 2:
            number = parts[0]
            word = parts[1]
            
            # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π text —ç–ª–µ–º–µ–Ω—Ç
            text_pattern = rf'(<text[^>]*id="{re.escape(element_id)}"[^>]*>)(.*?)(</text>)'
            match = re.search(text_pattern, self.processed_svg, re.DOTALL)
            
            if match:
                opening_tag = match.group(1)
                closing_tag = match.group(3)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x_match = re.search(r'x="([^"]*)"', opening_tag)
                y_match = re.search(r'y="([^"]*)"', opening_tag)
                
                if x_match and y_match:
                    x = float(x_match.group(1))
                    y = float(y_match.group(1))
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º 30px
                    new_content = f"""<tspan x="{x}" y="{y}">{number}</tspan><tspan x="{x + 30}" y="{y}">{word}</tspan>"""
                    
                    replacement = f"{opening_tag}{new_content}{closing_tag}"
                    self.processed_svg = re.sub(text_pattern, replacement, self.processed_svg, flags=re.DOTALL)
        else:
            self._replace_simple_text(element_id, text)
    
    def _replace_simple_text(self, element_id: str, new_text: str):
        """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞"""
        text_pattern = rf'(<text[^>]*id="{re.escape(element_id)}"[^>]*>)(.*?)(</text>)'
        replacement = rf'\g<1>{new_text}\g<3>'
        self.processed_svg = re.sub(text_pattern, replacement, self.processed_svg, flags=re.DOTALL)
    
    def replace_image(self, dyno_id: str, image_path: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if dyno_id not in self.dyno_elements:
            print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {dyno_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        element_id = self.dyno_elements[dyno_id]['id']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        try:
            with open(image_path, 'rb') as img_file:
                img_data = img_file.read()
                img_base64 = base64.b64encode(img_data).decode('utf-8')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                if image_path.lower().endswith('.png'):
                    mime_type = 'image/png'
                elif image_path.lower().endswith('.jpg') or image_path.lower().endswith('.jpeg'):
                    mime_type = 'image/jpeg'
                else:
                    mime_type = 'image/png'
                
                data_url = f"data:{mime_type};base64,{img_base64}"
                
                # –ó–∞–º–µ–Ω—è–µ–º href –≤ image —ç–ª–µ–º–µ–Ω—Ç–µ
                image_pattern = rf'(<image[^>]*id="{re.escape(element_id)}"[^>]*href=")[^"]*(")'
                replacement = rf'\g<1>{data_url}\g<2>'
                self.processed_svg = re.sub(image_pattern, replacement, self.processed_svg)
                
                print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ {dyno_id}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {dyno_id}: {e}")
    
    def apply_universal_wrapping(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å–∞...")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        text_pattern = r'<text[^>]*x="([^"]*)"[^>]*>(.*?)</text>'
        matches = re.finditer(text_pattern, self.processed_svg, re.DOTALL)
        
        for match in matches:
            x_pos = float(match.group(1))
            text_content = match.group(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫ –∫—Ä–∞—é (80% –æ—Ç —à–∏—Ä–∏–Ω—ã canvas)
            edge_threshold = self.canvas_width * 0.8
            
            if x_pos > edge_threshold and len(text_content) > 20:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å
                self._wrap_text_element(match.group(0), text_content)
        
        return self.processed_svg
    
    def _wrap_text_element(self, original_element: str, text_content: str):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ
        words = text_content.split()
        if len(words) > 2:
            mid_point = len(words) // 2
            line1 = ' '.join(words[:mid_point])
            line2 = ' '.join(words[mid_point:])
            
            # –ó–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
            x_match = re.search(r'x="([^"]*)"', original_element)
            y_match = re.search(r'y="([^"]*)"', original_element)
            
            if x_match and y_match:
                x = x_match.group(1)
                y = float(y_match.group(1))
                
                new_element = original_element.replace(
                    text_content,
                    f'<tspan x="{x}" y="{y}">{line1}</tspan><tspan x="{x}" y="{y + 25}">{line2}</tspan>'
                )
                
                self.processed_svg = self.processed_svg.replace(original_element, new_element)
    
    def process_complete_data(self, data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        text_mappings = {
            'date': data.get('date', 'JUNE 15 2024'),
            'time': data.get('time', '2PM - 5PM'),
            'price': data.get('price', '$2,850,000'),
            'propertyaddress': data.get('address', '123 Luxury Lane, Beverly Hills, CA'),
            'bedrooms': data.get('bedrooms', '3 bedroom'),
            'bathrooms': data.get('bathrooms', '2 bathroom'),
            'name': data.get('agent_name', 'Sarah Johnson'),
            'phone': data.get('agent_phone', '+1 (310) 555-0123'),
            'email': data.get('agent_email', 'sarah.johnson@luxuryrealty.com'),
            'propertyfeatures': data.get('features', 'Pool, 3-car garage, wine cellar, marble floors')
        }
        
        for dyno_id, value in text_mappings.items():
            if dyno_id in self.dyno_elements:
                self.replace_text(dyno_id, value)
        
        # –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_mappings = {
            'propertyimage': data.get('property_image'),
            'logo': data.get('logo_image'),
            'agentheadshot': data.get('agent_image')
        }
        
        for dyno_id, image_path in image_mappings.items():
            if dyno_id in self.dyno_elements and image_path and os.path.exists(image_path):
                self.replace_image(dyno_id, image_path)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å
        self.apply_universal_wrapping()
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return self.processed_svg
    
    def create_carousel_slides(self, main_data: Dict, additional_images: List[str]) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–∞–π–¥—ã –∫–∞—Ä—É—Å–µ–ª–∏"""
        print(f"üé† –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ {len(additional_images) + 1} —Å–ª–∞–π–¥–æ–≤...")
        
        slides = []
        
        # –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        main_slide = self.process_complete_data(main_data)
        slides.append(main_slide)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–∞–π–¥—ã - —Ç–æ–ª—å–∫–æ —Å –∑–∞–º–µ–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è property
        for i, image_path in enumerate(additional_images):
            slide_processor = CompleteSVGProcessor(self.original_svg, self.canvas_width)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ property
            if os.path.exists(image_path):
                slide_processor.replace_image('propertyimage', image_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            slide_processor.process_complete_data(main_data)
            
            slides.append(slide_processor.processed_svg)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª–∞–π–¥ {i + 2}")
        
        print(f"üéä –ö–∞—Ä—É—Å–µ–ª—å –≥–æ—Ç–æ–≤–∞: {len(slides)} —Å–ª–∞–π–¥–æ–≤")
        return slides
    
    def save_svg(self, filename: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π SVG"""
        filepath = os.path.join(tempfile.gettempdir(), filename)
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(self.processed_svg)
        return filepath

def test_complete_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ SVG –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    template_path = "/home/ubuntu/upload/post(9).svg"
    if not os.path.exists(template_path):
        print("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(template_path, 'r', encoding='utf-8') as f:
        svg_content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = CompleteSVGProcessor(svg_content)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'date': 'JUNE 15 2024',
        'time': '2PM - 5PM',
        'price': '$2,850,000',
        'address': '123 Luxury Lane, Beverly Hills, CA 90210',
        'bedrooms': '3 bedroom',
        'bathrooms': '2 bathroom',
        'agent_name': 'Sarah Johnson',
        'agent_phone': '+1 (310) 555-0123',
        'agent_email': 'sarah.johnson@luxuryrealty.com',
        'features': 'Pool, 3-car garage, wine cellar, marble floors'
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    result = processor.process_complete_data(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = processor.save_svg('complete_test_result.svg')
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    
    return output_path

if __name__ == "__main__":
    test_complete_processor()

